name: 小黑盒每日签到

on:
  schedule:
    - cron: '0 22 * * *'   # UTC 22:00 = 北京时间6:00
    - cron: '10 22 * * *'  # UTC 22:10 = 北京时间6:10（备用）
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  sign:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 缓存依赖
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: 安装依赖
      run: |
        if [ -f package.json ]; then
          npm install
        else
          npm install axios cheerio crypto-js
        fi
        
    - name: 运行签到脚本
      env:
        BLACKBOX_USERNAME: ${{ secrets.BLACKBOX_USERNAME }}
        BLACKBOX_PASSWORD: ${{ secrets.BLACKBOX_PASSWORD }}
        BLACKBOX_TOKEN: ${{ secrets.BLACKBOX_TOKEN }}
        BLACKBOX_COOKIE: ${{ secrets.BLACKBOX_COOKIE }}
        BLACKBOX_USERID: ${{ secrets.BLACKBOX_USERID }}
        BLACKBOX_SESSDATA: ${{ secrets.BLACKBOX_SESSDATA }}
        SCKEY: ${{ secrets.SCKEY }}  # Server酱密钥
        NODE_ENV: production
        TZ: Asia/Shanghai
      run: |
        echo "START_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        
        echo "检查环境变量..."
        if [ -z "$BLACKBOX_USERNAME" ] && [ -z "$BLACKBOX_COOKIE" ]; then
          echo "⚠️ 未设置 BLACKBOX_USERNAME 或 BLACKBOX_COOKIE"
        fi
        
        if [ -f "BlackBoxSign.js" ]; then
          node BlackBoxSign.js && echo "SUCCESS=true" >> $GITHUB_ENV || echo "❌ 脚本失败"
        elif [ -f "main.js" ]; then
          node main.js && echo "SUCCESS=true" >> $GITHUB_ENV
        elif [ -f "sign.js" ]; then
          node sign.js && echo "SUCCESS=true" >> $GITHUB_ENV
        elif [ -f "index.js" ]; then
          node index.js && echo "SUCCESS=true" >> $GITHUB_ENV
        else
          echo "未找到主执行文件"
          ls -la
        fi
        
        echo "END_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        
    # 修复后的Server酱通知步骤
    - name: Server酱通知
      if: always()
      run: |
        if [ "${{ env.SUCCESS }}" = "true" ]; then
          TITLE="小黑盒签到成功"
          STATUS="✅"
        else
          TITLE="小黑盒签到失败!"
          STATUS="❌"
        fi

        # 构造Markdown（使用\\n避免JSON解析错误）
        MARKDOWN="## $TITLE $STATUS\\n\\n"
        MARKDOWN+="- **执行时间**: ${{ env.START_TIME }} → ${{ env.END_TIME }}\\n"
        MARKDOWN+="- **作业链接**: [点击查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\\n\\n"
        MARKDOWN+="> GitHub Actions自动推送"

        # 关键修复：转义特殊字符
        ESCAPED_MD=$(echo "$MARKDOWN" | sed 's/"/\\"/g; s/$/\\n/;' | tr -d '\n')
        
        # 发送请求（带错误重试）
        max_retries=2
        retry_count=0
        while [ $retry_count -lt $max_retries ]; do
          response=$(curl -s -X POST \
            "https://sctapi.ftqq.com/${{ secrets.SCKEY }}.send" \
            -H 'Content-Type: application/json' \
            -d "{\"title\": \"$TITLE\", \"desp\": \"$ESCAPED_MD\"}")
          
          if echo "$response" | grep -q '"errno":0'; then
            echo "✅ 通知发送成功"
            break
          else
            echo "⚠️ 重试中 ($((retry_count+1))/$max_retries): $response"
            sleep 3
            ((retry_count++))
          fi
        done
        
        if [ $retry_count -eq $max_retries ]; then
          echo "❌ 最终通知发送失败"
        fi
        
    - name: 上传日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sign-logs
        path: |
          *.log
          logs/
        retention-days: 7
