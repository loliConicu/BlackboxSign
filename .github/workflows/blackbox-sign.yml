name: 小黑盒每日签到

on:
  schedule:
    # 每天早上8点执行 (UTC时间0点 = 北京时间8点)
    - cron: '0 0 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  sign:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 缓存依赖
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: 安装依赖
      run: |
        npm init -y
        npm install axios
        
    - name: 创建签到脚本
      run: |
        cat > sign.js << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        const path = require('path');
        
        // 获取当前日期
        function getDate() {
          const now = new Date();
          return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;
        }
        
        // Server酱推送
        async function serverchanNotify(title, content) {
          const SERVERCHAN_KEY = process.env.SERVERCHAN_KEY;
          if (!SERVERCHAN_KEY) return;
          
          console.log("准备通过Server酱发送通知...");
          
          try {
            const result = await axios.post(`https://sctapi.ftqq.com/${SERVERCHAN_KEY}.send`, {
              title: title,
              desp: content
            });
            
            console.log("Server酱推送成功");
            console.log(`状态码: ${result.status}, 响应: ${JSON.stringify(result.data)}`);
            return true;
          } catch (error) {
            console.error("Server酱推送失败:", error.message);
            return false;
          }
        }
        
        // 使用最新API路径的小黑盒签到函数
        async function signIn() {
          try {
            console.log(`开始小黑盒签到任务 - ${new Date().toLocaleString('zh-CN')}`);
            
            // 获取环境变量
            const cookie = process.env.BLACKBOX_COOKIE;
            
            if (!cookie) {
              throw new Error("未设置BLACKBOX_COOKIE环境变量");
            }
            
            // 分割多个账号
            const accounts = cookie.split('&');
            console.log(`检测到 ${accounts.length} 个账号`);
            
            let results = [];
            
            for (const account of accounts) {
              const [heyboxId, cookies] = account.split('#');
              
              console.log(`正在签到账号: ${heyboxId}`);
              
              try {
                // 使用正确的签到API路径
                const result = await axios.post(
                  'https://api.xiaoheihe.cn/account/sign_in/', 
                  {}, 
                  {
                    headers: {
                      'Cookie': cookies,
                      'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'
                    }
                  }
                );
                
                // 解析返回结果
                if (result.data && result.data.code === 0) {
                  console.log(`签到成功: ${JSON.stringify(result.data)}`);
                  results.push({
                    account: heyboxId,
                    status: '成功',
                    message: result.data.message || '签到成功'
                  });
                } else {
                  results.push({
                    account: heyboxId,
                    status: '失败',
                    message: result.data?.msg || `服务器返回: ${result.status}`
                  });
                }
              } catch (error) {
                console.error(`账号 ${heyboxId} 请求失败: ${error.message}`);
                results.push({
                  account: heyboxId,
                  status: '请求失败',
                  message: error.message
                });
              }
            }
            
            // 构造通知内容
            const dateStr = getDate();
            const title = `小黑盒签到结果 - ${dateStr}`;
            
            let content = `## 签到结果 (${dateStr})\n\n`;
            content += results.map(r => `🔹 **账号 ${r.account}**: ${r.status}\n💬 ${r.message}`).join('\n\n');
            content += `\n\n> 执行时间: ${new Date().toLocaleString('zh-CN')}`;
            
            // 发送Server酱通知
            await serverchanNotify(title, content);
            
            return { success: true, results };
            
          } catch (error) {
            console.error("签到主流程错误:", error.message);
            
            // 发送错误通知
            await serverchanNotify(
              "小黑盒签到出错", 
              `错误信息: ${error.message}\n时间: ${new Date().toLocaleString('zh-CN')}`
            );
            
            throw error; // 抛出错误使工作流失败
          }
        }
        
        // 主函数
        (async () => {
          try {
            const signResult = await signIn();
            console.log("签到任务完成:", signResult.success ? "成功" : "失败");
            process.exit(signResult.success ? 0 : 1);
          } catch (error) {
            console.error("签到任务执行失败", error);
            process.exit(1);
          }
        })();
        EOF
        
    - name: 运行签到脚本
      env:
        BLACKBOX_COOKIE: ${{ secrets.BLACKBOX_COOKIE }}  # 使用您之前提取的cookie
        SERVERCHAN_KEY: ${{ secrets.SERVERCHAN_KEY }}     # Server酱推送KEY
      run: |
        node sign.js
        
    - name: 上传日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sign-logs
        path: |
          sign.js  # 包含日志的输出文件
        retention-days: 7
