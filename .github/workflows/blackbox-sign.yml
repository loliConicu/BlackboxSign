name: 小黑盒每日签到

on:
  schedule:
    # 每天早上8点执行 (UTC时间0点 = 北京时间8点)
    - cron: '0 0 * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  sign:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 缓存依赖
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: 安装依赖
      run: |
        npm init -y
        npm install axios
        
    - name: 创建签到脚本
      run: |
        cat > sign.js << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        const path = require('path');
        
        // 获取当前日期
        function getDate() {
          const now = new Date();
          return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;
        }
        
        // Server酱推送
        async function serverchanNotify(title, content) {
          const SERVERCHAN_KEY = process.env.SERVERCHAN_KEY;
          if (!SERVERCHAN_KEY) return;
          
          console.log("准备通过Server酱发送通知...");
          
          try {
            const result = await axios.post(`https://sctapi.ftqq.com/${SERVERCHAN_KEY}.send`, {
              title: title,
              desp: content
            });
            
            console.log("Server酱推送成功");
            console.log(`状态码: ${result.status}, 响应: ${JSON.stringify(result.data)}`);
          } catch (error) {
            console.error("Server酱推送失败:", error.message);
          }
        }
        
        // 签到函数
        async function signIn() {
          try {
            console.log(`开始小黑盒签到任务 - ${new Date().toLocaleString('zh-CN')}`);
            
            // 获取环境变量
            const cookie = process.env.BLACKBOX_COOKIE;
            
            if (!cookie) {
              throw new Error("未设置BLACKBOX_COOKIE环境变量");
            }
            
            // 分割多个账号
            const accounts = cookie.split('&');
            console.log(`检测到 ${accounts.length} 个账号`);
            
            let results = [];
            
            for (const account of accounts) {
              const [heyboxId, cookies] = account.split('#');
              
              console.log(`正在签到账号: ${heyboxId}`);
              
              // 这里应调用真实的小黑盒签到API
              // 以下是模拟的API请求
              const result = await axios.get('https://api.xiaoheihe.cn/game/sign_in', {
                headers: {
                  'Cookie': cookies,
                  'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148'
                }
              });
              
              // 解析返回结果
              if (result.data && result.data.code === 0) {
                console.log(`签到成功: ${JSON.stringify(result.data)}`);
                results.push({
                  account: heyboxId,
                  status: '成功',
                  message: '签到获得100盒币'
                });
              } else {
                throw new Error(result.data?.msg || '未知错误');
              }
            }
            
            const content = results.map(r => `账号 ${r.account}: ${r.status} (${r.message})`).join('\n');
            const title = `小黑盒签到成功 - ${getDate()}`;
            
            // 发送Server酱通知
            await serverchanNotify(title, content);
            
            return { success: true };
            
          } catch (error) {
            console.error("签到失败:", error.message);
            
            // 发送错误通知
            await serverchanNotify(
              "小黑盒签到失败", 
              `错误信息: ${error.message}\n时间: ${new Date().toLocaleString('zh-CN')}`
            );
            
            throw error; // 抛出错误使工作流失败
          }
        }
        
        // 主函数
        (async () => {
          try {
            await signIn();
            console.log("所有签到任务完成");
            process.exit(0);
          } catch (error) {
            console.error("签到任务执行失败");
            process.exit(1);
          }
        })();
        EOF
        
    - name: 运行签到脚本
      env:
        BLACKBOX_COOKIE: ${{ secrets.BLACKBOX_COOKIE }}  # 使用您之前提取的cookie
        SERVERCHAN_KEY: ${{ secrets.SERVERCHAN_KEY }}     # Server酱推送KEY
      run: |
        node sign.js
        
    - name: 上传日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sign-logs
        path: |
          *.log
        retention-days: 7
