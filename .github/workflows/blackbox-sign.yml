name: 小黑盒每日签到

on:
  schedule:
    - cron: '0 22 * * *'   # UTC 22:00 = 北京时间6:00
    - cron: '10 22 * * *'  # 备用时间
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  sign:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 缓存依赖
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: 安装依赖
      run: |
        if [ -f package.json ]; then
          npm install
        else
          npm install axios cheerio crypto-js
        fi
        
    - name: 运行签到脚本
      env:
        BLACKBOX_USERNAME: ${{ secrets.BLACKBOX_USERNAME }}
        BLACKBOX_PASSWORD: ${{ secrets.BLACKBOX_PASSWORD }}
        BLACKBOX_TOKEN: ${{ secrets.BLACKBOX_TOKEN }}
        BLACKBOX_COOKIE: ${{ secrets.BLACKBOX_COOKIE }}
        BLACKBOX_USERID: ${{ secrets.BLACKBOX_USERID }}
        BLACKBOX_SESSDATA: ${{ secrets.BLACKBOX_SESSDATA }}
        SCKEY: ${{ secrets.SCKEY }}  # Server酱密钥
        NODE_ENV: production
        TZ: Asia/Shanghai
      run: |
        echo "START_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        
        echo "检查环境变量..."
        if [ -z "$BLACKBOX_USERNAME" ] && [ -z "$BLACKBOX_COOKIE" ]; then
          echo "⚠️ 未设置 BLACKBOX_USERNAME 或 BLACKBOX_COOKIE"
        fi
        
        if [ -f "BlackBoxSign.js" ]; then
          node BlackBoxSign.js && echo "SUCCESS=true" >> $GITHUB_ENV || echo "❌ 脚本失败"
        elif [ -f "main.js" ]; then
          node main.js && echo "SUCCESS=true" >> $GITHUB_ENV
        elif [ -f "sign.js" ]; then
          node sign.js && echo "SUCCESS=true" >> $GITHUB_ENV
        elif [ -f "index.js" ]; then
          node index.js && echo "SUCCESS=true" >> $GITHUB_ENV
        else
          echo "未找到主执行文件"
          ls -la
        fi
        
        echo "END_TIME=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        
    # ====== 优化后的Server酱通知（关键修改） ======
    - name: Server酱通知
      if: always()
      run: |
        # 1. 动态生成标题和状态
        if [ "${{ env.SUCCESS }}" = "true" ]; then
          TITLE="🟢 小黑盒签到成功"
          STATUS="✅ 执行完成"
          EMoji="🎉"
        else
          TITLE="🔴 小黑盒签到失败!"
          STATUS="❌ 执行异常"
          EMoji="⚠️"
        fi
        
        # 2. 构造Markdown内容（增强可读性）
        MARKDOWN="## $TITLE $EMoji\n\n"
        MARKDOWN+="### 任务概况\n"
        MARKDOWN+="- **执行时间**：${{ env.START_TIME }} → ${{ env.END_TIME }}\n"
        MARKDOWN+="- **运行状态**：$STATUS\n"
        MARKDOWN+="- **仓库地址**：https://github.com/${{ github.repository }}\n"
        MARKDOWN+="- **作业链接**：[点击查看详情](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n"
        
        # 3. 动态添加诊断信息（根据执行结果）
        if [ "${{ env.SUCCESS }}" != "true" ]; then
          MARKDOWN+="### 可能原因\n"
          MARKDOWN+="- 检查环境变量是否正确配置（COOKIE/TOKEN）\n"
          MARKDOWN+="- 确认脚本文件是否存在或更新\n"
          MARKDOWN+="- 查看仓库日志文件（已上传至 artifacts）\n"
        fi
        
        MARKDOWN+="> 由 GitHub Actions 自动推送 | 🔗 [查看工作流](${{ github.server_url }}/${{ github.repository }}/actions/workflows/${{ github.workflow }})"
        
        # 4. 安全转义（支持所有特殊字符）
        ESCAPED_MD=$(echo "$MARKDOWN" | jq -sR 'gsub("\n"; "\\n") | gsub("\""; "\\\"")')
        
        # 5. 增强版API请求（带重试和详细日志）
        SERVER_API="https://sctapi.ftqq.com/${{ secrets.SCKEY }}.send"
        MAX_RETRIES=3
        RETRY_COUNT=0
        SUCCESS_FLAG=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          # 发送请求并捕获响应
          RESPONSE=$(curl -s -X POST \
            "$SERVER_API" \
            -H "Content-Type: application/json" \
            -d "{\"title\": \"$TITLE\", \"desp\": \"$ESCAPED_MD\"}")
          
          # 解析响应状态（兼容新旧API格式）
          ERROR_CODE=$(echo "$RESPONSE" | jq -r '.errno // .code')
          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.message // .msg // "未知错误"')
          
          if [ "$ERROR_CODE" -eq 0 ]; then
            echo "✅ 通知发送成功 (第$((RETRY_COUNT+1))次尝试)"
            echo "响应内容: $RESPONSE"
            SUCCESS_FLAG=true
            break
          else
            echo "⚠️ 通知发送失败 (第$((RETRY_COUNT+1))次尝试): $ERROR_MSG"
            echo "响应内容: $RESPONSE"
            ((RETRY_COUNT++))
            sleep $((2^RETRY_COUNT))  # 指数退避策略：2s→4s→8s
          fi
        done
        
        if [ "$SUCCESS_FLAG" = false ]; then
          echo "❌ 最终通知发送失败，已达到最大重试次数"
          echo "建议手动访问 Server酱后台 检查 SendKey 有效性"
        fi
        
    - name: 上传日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sign-logs
        path: |
          *.log
          logs/
        retention-days: 7
